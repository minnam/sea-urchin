import React, {Component} from 'react'
import {style, classes, media, createTypeStyle} from 'typestyle'
import _ from 'lodash'

import {CLASSES, work2, work3, template, WIDTHS} from './div-classes'

const ALIGN = {
    left: 'flex-start',
    right: 'flex-end',
    top: 'flex-start',
    bottom: 'flex-end',
    center: 'center',
    between: 'space-between',
    around: 'space-around',
    even: 'space-evenly',
}

const SIZE = {
    xl: 'xl',
    lg: 'lg',
    md: 'md',
    sm: 'sm',
    xs: 'xs',
}

class Grid extends Component {

    constructor (props) {
        super(props);

        this.state = {}
    }

    componentDidMount () {

        const {
            align,
            alignItems,
        } = this.props;

        if (_.isString(alignItems)) {

            this.setState({
                alignClass: style({
                    alignSelf: ALIGN[align],
                    justifyContent: ALIGN[alignItems] ? ALIGN[alignItems] : ALIGN.left,
                    alignItems: ALIGN[alignItems] ? ALIGN[alignItems] : ALIGN.top
                })
            })
        } else if (_.isArray(alignItems)) {

            this.setState({
                alignClass: style({
                    alignSelf: ALIGN[align],
                    justifyContent: ALIGN[alignItems[0]] ? ALIGN[alignItems[0]] : ALIGN.left,
                    alignItems: ALIGN[alignItems[1]] ? ALIGN[alignItems[1]] : ALIGN.top
                })
            })
        } else {

            this.setState({
                alignClass: style({
                    alignSelf: ALIGN[align],
                })
            })

        }


        let newState = {...this.state};
        let defaultClasses;

        if (this.props.seperate) {

            let seperate;

            defaultClasses = {
                xl: work2({minWidth:1200}, {}, !_.isNil(this.props.seperate.xl) ? this.props.seperate.xl : this.props.seperate.gap, _.isPlainObject(this.props.xl) ? this.props.xl.size : this.props.xl),
                lg: work2({minWidth:992, maxWidth: 1199}, {}, !_.isNil(this.props.seperate.lg) ? this.props.seperate.lg : this.props.seperate.gap, _.isPlainObject(this.props.lg) ? this.props.lg.size : this.props.lg),
                md: work2({minWidth:768, maxWidth: 991}, {}, !_.isNil(this.props.seperate.md) ? this.props.seperate.md : this.props.seperate.gap, _.isPlainObject(this.props.md) ? this.props.md.size : this.props.md),
                sm: work2({minWidth:576, maxWidth: 767}, {}, !_.isNil(this.props.seperate.sm) ? this.props.seperate.sm : this.props.seperate.gap, _.isPlainObject(this.props.sm) ? this.props.sm.size : this.props.sm),
                xs: work2({maxWidth: 575}, {}, !_.isNil(this.props.seperate.xs) ? this.props.seperate.xs : this.props.seperate.gap, _.isPlainObject(this.props.xs) ? this.props.xs.size : this.props.xs),
            }
        }

        for (let key in SIZE) {
            newState = { ...newState,
                ...this.setClasses(key)
            };
        }

        let currentDefaultClasses;


        const seperate = {...this.props.seperate};

        const props = {...this.props};

        const templateYay = {
            ...template,
            [Symbol.iterator]: function (test) {
                let index = 0;
                let obj = this;

                return {
                    next: () => {
                        let keys = Object.keys(obj);
                        let key = keys[index];

                        index++;

                        return {
                            value: {
                                key,
                                value: work3(
                                    this[key],
                                    {},
                                    !_.isNil(seperate[key]) ? seperate[key] : seperate.gap,
                                    _.isPlainObject(props[key]) ? props[key].size : props[key]
                                )
                            },
                            done: (index >= keys.length)
                        }
                    }
                }

            }
        }

        const test1 = [];
        const test = [];

        const {
            xl = {},
            lg = {},
            sm = {},
            md = {},
            xs = {}
        } = newState;



        for (let temp of templateYay) {

            const boundary = newState[temp.key];
            if (boundary) {
                console.log(boundary);
                if (boundary.className)
                    test1.push(boundary.className[boundary.size ? boundary.size : 12]);
            }

            if (this.props.seperate) {
                if (this.props.seperate[temp.key]) {
                    test.push(temp.value);
                }
            }
        }

        if (this.props.seperate) {
            currentDefaultClasses = style(
                CLASSES.default,
                CLASSES[this.props.container ? 'row' : 'column'],
                this.props.style,
                ...test1,
                ...test,

            )
        } else {
            currentDefaultClasses = style(
                CLASSES.default,
                CLASSES[this.props.container ? 'row' : 'column'],
                this.props.style,
                ...test1,
                ...test,

            )
        }

        this.setState({
            currentDefaultClasses
        });
    }

    display = () => {
        const {
            children,
            gap,
            xl = {},
            lg = {},
            md = {},
            sm = {},
            xs = {},
        } = this.props

        if (!children) {
            return null
        } else if (_.isString(children)) {
            // Need to send warning
            return children
        }

        if (children.length) {
            return (
                children.map((child, key) => {
                    if (_.isString(child)) {
                        // Need to send warning
                        return child;
                    }

                    return (
                        React.cloneElement(child,{
                            key,
                            ...child.props,
                            seperate: {
                                gap: gap,
                                xl: xl.gap,
                                lg: lg.gap,
                                md: md.gap,
                                sm: sm.gap,
                                xs: xs.gap,
                            },
                            style: {
                                ...child.props.style,
                            }
                        })
                    )
                })
            )
        } else {

            return (
                React.cloneElement(children,{
                    ...children.props,
                    style: {
                        ...children.props.style,
                    }
                })
            )
        }
    }

    setClasses (name) {
        const props = this.props;
        let defaultClasses;

        if (props[name]) {
            if (_.isNumber(props[name]) ) {
                const numberOfCol = _.round(props[name], 1);
                const state = {...this.state};

                state[name] = {
                    size: props[name],
                    className: work2(template[name], props[name].style, null, props[name])
                };

                return ({
                    ...state
                });

            } else if (_.isPlainObject(props[name])) {
                const state = {...this.state};
                state[name] = {
                    className: props[name] || props[name].style ? work2(template[name], props[name].style, null, props[name].size) : null,
                    ...props[name]
                }

                return ({
                    ...state
                });
            }
        }
    }

    render () {

        const {
            currentDefaultClasses,
            alignClass,
        } = this.state;

        return (
            <div className = {classes(alignClass, currentDefaultClasses)}>
                {this.display()}
            </div>
        )
    }
}

export default Grid;
